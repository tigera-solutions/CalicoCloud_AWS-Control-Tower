

# ----------------------------------------------------------------------------------------------------------
#  CloudFormation Template 1 of 1 -
#
#   This templates allows newly added Control Tower accounts to be connected automatically to Calicocloud
#
#   This template provisions infrastructure in the AWS Control Tower Management account that allows creation of CalicocloudConnect
#   stack instances in Control Tower managed accounts whenever a new Control Tower managed account is added or existing account updated

#  1- Creates a CalicocloudConnect Stackset in the AWS Control Tower Management Account
#  2- Provisions a Eventbridge Rule that is triggered based on a Control Tower Lifecycle Event
#  3- Provisions a Lifecyle Lambda as a target for the Eventbridge Events Rule.
#    - The Lifecycle Lambda deploys a CalicocloudConnect stack in the newly added/updated Control Tower managed account
#
#   -----------------------------------

Parameters:

  CalicocloudKubeAdminRoleName:
    Type: String
    Default: CalicocloudKubeAdminRole
  CalicocloudStateMachineName:
    Type: String
    Default: calicocloud-eks-connection
  StateMachineLogRetention:
    Type: Number
    Default: 365
  NodeGroupRolePrefix:
    Type: String
    Default: calicocloud-ng
  NodeGroupInstanceType:
    Type: String
    Default: m5.large
  NodeGroupSize:
    Type: Number
    Default: 1
  CalicocloudScriptUrl:
    Type: String
  EventFilterTagKey:
    Type: String
    Default: Team
  EventFilterTagValue:
    Type: String
    Default: CT
  NotificationEmailAddress:
    Type: String
    Default: ''
    Description: '(Optional) Email address for notifications'

Resources:
  CaptureControlTowerLifeCycleEvents:
    Type: AWS::Events::Rule
    Properties:
      Description: Capture Control Tower LifeCycle Events and Trigger an Action
      EventPattern:
        detail:
          eventName:
            - CreateManagedAccount
            - UpdateManagedAccount
          eventSource:
            - controltower.amazonaws.com
        detail-type:
          - AWS Service Event via CloudTrail
        source:
          - aws.controltower
      State: ENABLED
      Targets:
        - Arn: !GetAtt "TriggerCustomizationsOnLifeCycleEvent.Arn"
          Id: IDCaptureControlTowerLifeCycleEvents

  PermissionForEventsToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt "TriggerCustomizationsOnLifeCycleEvent.Arn"
      Principal: events.amazonaws.com
      SourceArn: !GetAtt "CaptureControlTowerLifeCycleEvents.Arn"

  LambdaRoleToCaptureEvents:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
            Condition: {}
      Path: /
      Policies:
        - PolicyName: inline-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'cloudformation:CreateStackInstances'
                Resource: !Join [':',['arn:aws:cloudformation', !Ref 'AWS::Region', !Ref 'AWS::AccountId', 'stackset/CalicocloudConnnectStackSet:*']]
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  TriggerCustomizationsOnLifeCycleEvent:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import json
          import os
          import boto3
          import logging
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)
          result = {"ResponseMetadata":{"HTTPStatusCode":"400"}}

          def lambda_handler(event, context):

              masterAcct = event['account']
              eventDetails = event['detail']
              regionName = eventDetails['awsRegion']
              eventName = eventDetails['eventName']
              srvEventDetails = eventDetails['serviceEventDetails']
              if eventName == 'CreateManagedAccount' or eventName == 'UpdateManagedAccount':
                  newAccInfo = {}
                  logger.info('Event Processed Successfully')
                  if eventName == 'CreateManagedAccount':
                      newAccInfo = srvEventDetails['createManagedAccountStatus']
                  if eventName == 'UpdateManagedAccount':
                      newAccInfo = srvEventDetails['updateManagedAccountStatus']
                  cmdStatus = newAccInfo['state']
                  if cmdStatus == 'SUCCEEDED':
                      '''Successful event received'''
                      accId = newAccInfo['account']['accountId']
                      cloudformation = boto3.client('cloudformation')
                      try:
                         result = cloudformation.create_stack_instances(StackSetName='CalicocloudConnnectStackSet', Accounts=[accId], Regions=[regionName])
                         logger.info('Stack instance created Successfully')
                      except Exception as e:
                         logger.error('Unable to launch Stack instance, REASON: {}'.format(e))
                  else:
                      '''Unsuccessful event received'''
                      logger.info('Unsuccessful Event Received. SKIPPING :{}'.format(event))
                      return(False)
              else:
                  logger.info('Control Tower Event Captured :{}'.format(event))
      Handler: index.lambda_handler
      MemorySize: 256
      Role: !GetAtt "LambdaRoleToCaptureEvents.Arn"
      Runtime: python3.7
      Timeout: 60
  ############### StackSet for AWS monitoring policy ##########################
  CalicocloudConnnectStackSet:
    Type: AWS::CloudFormation::StackSet
    Properties:
      Description: StackSet for creating calico cloud connect automation stack
      StackSetName: CalicocloudConnnectStackSet
      PermissionModel: SELF_MANAGED
      AdministrationRoleARN: !Join [':', ['arn:aws:iam:', !Ref 'AWS::AccountId', 'role/service-role/AWSControlTowerStackSetRole']]
      ExecutionRoleName: "AWSControlTowerExecution"
      Capabilities:
        - CAPABILITY_NAMED_IAM
      TemplateBody: |
        AWSTemplateFormatVersion: 2010-09-09
        Description: Template to create resources required for calicocloud solution
        Parameters:
          CalicocloudKubeAdminRoleName:
            Type: String
            Default: CalicocloudKubeAdminRole
          CalicocloudStateMachineName:
            Type: String
            Default: calicocloud-eks-connection
          StateMachineLogRetention:
            Type: Number
            Default: 365
          NodeGroupRolePrefix:
            Type: String
            Default: calicocloud-ng
          NodeGroupInstanceType:
            Type: String
            Default: m5.large
          NodeGroupSize:
            Type: Number
            Default: 1
          CalicocloudScriptUrl:
            Type: String
          EventFilterTagKey:
            Type: String
            Default: Team
          EventFilterTagValue:
            Type: String
            Default: CT
          NotificationEmailAddress:
            Type: String
            Default: ''
        Conditions:
          CreateSNSSubscription: !Not
            - !Equals
              - !Ref NotificationEmailAddress
              - ''
        Resources:
          EKSClusterEventRole:
            Type: 'AWS::IAM::Role'
            Properties:
              AssumeRolePolicyDocument:
                Statement:
                  - Action: 'sts:AssumeRole'
                    Effect: Allow
                    Principal:
                      Service: events.amazonaws.com
                Version: 2012-10-17
              Description: IAM role used by event rule to trigger calicocloudconnect state machine
              Policies:
                - PolicyName: stateMachinePermissionsPolicy
                  PolicyDocument:
                    Version: 2012-10-17
                    Statement:
                      - Sid: stateMachinePermissions
                        Effect: Allow
                        Action:
                          - 'states:StartExecution'
                        Resource:
                          - !GetAtt CalicocloudStateMachine.Arn
              RoleName: EKSClusterCreateEventRole
              Tags:
                - Key: Name
                  Value: EKSClusterCreateEventRole
          CalicocloudStateMachine:
            Type: 'AWS::StepFunctions::StateMachine'
            Properties:
              DefinitionString: |
                {
                  "Comment": "This is state machine to manage calicocloud connection",
                  "StartAt": "CreateRole",
                  "States": {
                    "AttachAmazonEC2ContainerRegistryReadOnly": {
                      "Next": "AttachAmazonSSMManagedInstanceCore",
                      "Parameters": {
                        "PolicyArn": "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly",
                        "RoleName.$": "$.NodeGroupRoleName"
                      },
                      "Resource": "arn:aws:states:::aws-sdk:iam:attachRolePolicy",
                      "Type": "Task",
                      "Catch": [
                        {
                          "ErrorEquals": [
                            "States.TaskFailed"
                          ],
                          "Next": "SNS Publish Fail",
                          "ResultPath": "$.Error"
                        }
                      ],
                      "ResultPath": null
                    },
                    "AttachAmazonEKSWorkerNodePolicy": {
                      "Next": "AttachAmazonEC2ContainerRegistryReadOnly",
                      "Parameters": {
                        "PolicyArn": "arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy",
                        "RoleName.$": "$.NodeGroupRoleName"
                      },
                      "Resource": "arn:aws:states:::aws-sdk:iam:attachRolePolicy",
                      "Type": "Task",
                      "Catch": [
                        {
                          "ErrorEquals": [
                            "States.TaskFailed"
                          ],
                          "Next": "SNS Publish Fail",
                          "ResultPath": "$.Error"
                        }
                      ],
                      "ResultPath": null
                    },
                    "AttachAmazonEKS_CNI_Policy": {
                      "Next": "PutRoleAssumePolicy",
                      "Parameters": {
                        "PolicyArn": "arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy",
                        "RoleName.$": "$.NodeGroupRoleName"
                      },
                      "Resource": "arn:aws:states:::aws-sdk:iam:attachRolePolicy",
                      "Type": "Task",
                      "Catch": [
                        {
                          "ErrorEquals": [
                            "States.TaskFailed"
                          ],
                          "Next": "SNS Publish Fail",
                          "ResultPath": "$.Error"
                        }
                      ],
                      "ResultPath": null
                    },
                    "AttachAmazonSSMManagedInstanceCore": {
                      "Next": "AttachAmazonEKS_CNI_Policy",
                      "Parameters": {
                        "PolicyArn": "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore",
                        "RoleName.$": "$.NodeGroupRoleName"
                      },
                      "Resource": "arn:aws:states:::aws-sdk:iam:attachRolePolicy",
                      "Type": "Task",
                      "Catch": [
                        {
                          "ErrorEquals": [
                            "States.TaskFailed"
                          ],
                          "Next": "SNS Publish Fail",
                          "ResultPath": "$.Error"
                        }
                      ],
                      "ResultPath": null
                    },
                    "CreateRole": {
                      "Next": "AttachAmazonEKSWorkerNodePolicy",
                      "Parameters": {
                        "AssumeRolePolicyDocument": {
                          "Statement": [
                            {
                              "Action": "sts:AssumeRole",
                              "Effect": "Allow",
                              "Principal": {
                                "Service": "ec2.amazonaws.com"
                              }
                            }
                          ],
                          "Version": "2012-10-17"
                        },
                        "RoleName.$": "$.NodeGroupRoleName"
                      },
                      "Resource": "arn:aws:states:::aws-sdk:iam:createRole",
                      "ResultPath": "$.NodeGroupRoleOutput",
                      "Type": "Task",
                      "Catch": [
                        {
                          "ErrorEquals": [
                            "States.TaskFailed"
                          ],
                          "Next": "SNS Publish Fail",
                          "ResultPath": "$.Error"
                        }
                      ]
                    },
                    "DescribeCluster": {
                      "Next": "EKSClusterStatus",
                      "Parameters": {
                        "Name.$": "$.ClusterName"
                      },
                      "Resource": "arn:aws:states:::aws-sdk:eks:describeCluster",
                      "ResultPath": "$.ClusterDetails",
                      "ResultSelector": {
                        "Status.$": "$.Cluster.Status"
                      },
                      "Type": "Task",
                      "Catch": [
                        {
                          "ErrorEquals": [
                            "States.TaskFailed"
                          ],
                          "Next": "SNS Publish Fail",
                          "ResultPath": "$.Error"
                        }
                      ]
                    },
                    "DescribeNodegroup": {
                      "Next": "NodeGroupChoice",
                      "Parameters": {
                        "ClusterName.$": "$.ClusterName",
                        "NodegroupName.$": "$.NodegroupName"
                      },
                      "Resource": "arn:aws:states:::aws-sdk:eks:describeNodegroup",
                      "ResultPath": "$.DescribeNodeGroupOutput",
                      "Type": "Task",
                      "Catch": [
                        {
                          "ErrorEquals": [
                            "States.TaskFailed"
                          ],
                          "Next": "SNS Publish Fail",
                          "ResultPath": "$.Error"
                        }
                      ]
                    },
                    "DescribeUpdatedCluster": {
                      "Next": "UpdatedClusterStatus",
                      "Parameters": {
                        "Name.$": "$.ClusterName"
                      },
                      "Resource": "arn:aws:states:::aws-sdk:eks:describeCluster",
                      "ResultPath": "$.ClusterDetails",
                      "ResultSelector": {
                        "Status.$": "$.Cluster.Status"
                      },
                      "Type": "Task",
                      "Catch": [
                        {
                          "ErrorEquals": [
                            "States.TaskFailed"
                          ],
                          "Next": "SNS Publish Fail",
                          "ResultPath": "$.Error"
                        }
                      ]
                    },
                    "EKS CreateNodegroup": {
                      "Next": "NodeGroupWait",
                      "Parameters": {
                        "ClusterName.$": "$.ClusterName",
                        "InstanceTypes.$": "$.NodeGroupInstanceTypes",
                        "NodeRole.$": "$.NodeGroupRoleOutput.Role.Arn",
                        "NodegroupName.$": "$.NodegroupName",
                        "ScalingConfig": {
                          "DesiredSize.$": "$.NodeGroupSize"
                        },
                        "Subnets.$": "$.NodeGroupSubnets"
                      },
                      "Resource": "arn:aws:states:::eks:createNodegroup",
                      "ResultPath": "$.NodeGroupOutput",
                      "Type": "Task",
                      "Catch": [
                        {
                          "ErrorEquals": [
                            "States.TaskFailed"
                          ],
                          "Next": "SNS Publish Fail",
                          "ResultPath": "$.Error"
                        }
                      ]
                    },
                    "EKSClusterStatus": {
                      "Choices": [
                        {
                          "Next": "Wait5Min",
                          "StringEquals": "ACTIVE",
                          "Variable": "$.ClusterDetails.Status"
                        },
                        {
                          "Next": "EKSClusterWait",
                          "Or": [
                            {
                              "StringEquals": "PENDING",
                              "Variable": "$.ClusterDetails.Status"
                            },
                            {
                              "StringEquals": "UPDATING",
                              "Variable": "$.ClusterDetails.Status"
                            },
                            {
                              "StringEquals": "CREATING",
                              "Variable": "$.ClusterDetails.Status"
                            }
                          ]
                        }
                      ],
                      "Default": "EKSClusterPass",
                      "Type": "Choice"
                    },
                    "EKSClusterPass": {
                      "Type": "Pass",
                      "Next": "SNS Publish Fail",
                      "ResultPath": "$.Error",
                      "Parameters": {
                        "Cause.$": "States.Format('EKS cluster {} creation failed', $.ClusterName)"
                      }
                    },
                    "EKSClusterWait": {
                      "Next": "DescribeCluster",
                      "Seconds": 60,
                      "Type": "Wait"
                    },
                    "Fail": {
                      "Type": "Fail"
                    },
                    "InstallKubectl": {
                      "Next": "KubeCtlWait",
                      "Parameters": {
                        "DocumentName": "AWS-RunShellScript",
                        "Parameters": {
                          "commands": [
                            "curl -LO \"https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl\"",
                            "curl -LO \"https://dl.k8s.io/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl.sha256\"",
                            "echo \"$(<kubectl.sha256) kubectl\" | sha256sum --check",
                            "sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl",
                            "kubectl version --client"
                          ]
                        },
                        "Targets": [
                          {
                            "Key": "tag:eks:nodegroup-name",
                            "Values.$": "States.Array($.NodegroupName)"
                          },
                          {
                            "Key": "tag:eks:cluster-name",
                            "Values.$": "States.Array($.ClusterName)"
                          }
                        ]
                      },
                      "Resource": "arn:aws:states:::aws-sdk:ssm:sendCommand",
                      "ResultPath": "$.Kubectl",
                      "ResultSelector": {
                        "CommandId.$": "$.Command.CommandId",
                        "Status.$": "$.Command.Status"
                      },
                      "Type": "Task",
                      "Catch": [
                        {
                          "ErrorEquals": [
                            "States.TaskFailed"
                          ],
                          "Next": "SNS Publish Fail",
                          "ResultPath": "$.Error"
                        }
                      ]
                    },
                    "ConnectCalicocloud": {
                      "Next": "ConnectCalicocloudWait",
                      "Parameters": {
                        "DocumentName": "AWS-RunShellScript",
                        "InstanceIds.$": "States.Array($.Kubectl.InstanceId)",
                        "Parameters": {
                          "commands.$": "States.Array('export KUBECONFIG=/tmp/.kube/config',States.Format('aws eks update-kubeconfig --name {} --role {} --region {}', $.ClusterName, $.CalicocloudKubeAdminRoleArn, $.Region),'kubectl get deployments -A', States.Format('cd /tmp && curl {} | bash', $.CalicocloudScriptUrl))"
                        }
                      },
                      "Resource": "arn:aws:states:::aws-sdk:ssm:sendCommand",
                      "ResultPath": "$.ConnectCalicocloud",
                      "ResultSelector": {
                        "CommandId.$": "$.Command.CommandId",
                        "InstanceId.$": "$.Command.InstanceIds[0]",
                        "Status.$": "$.Command.Status"
                      },
                      "Type": "Task",
                      "Catch": [
                        {
                          "ErrorEquals": [
                            "States.TaskFailed"
                          ],
                          "Next": "SNS Publish Fail",
                          "ResultPath": "$.Error"
                        }
                      ]
                    },
                    "KubeCtlChoice": {
                      "Choices": [
                        {
                          "Next": "KubeCtlWait",
                          "StringEquals": "Pending",
                          "Variable": "$.Kubectl.Status"
                        },
                        {
                          "Next": "KubeCtlWait",
                          "StringEquals": "InProgress",
                          "Variable": "$.Kubectl.Status"
                        },
                        {
                          "Next": "KubectlInvocationStatus",
                          "StringEquals": "Success",
                          "Variable": "$.Kubectl.Status"
                        }
                      ],
                      "Default": "KubeCtlPass",
                      "Type": "Choice"
                    },
                    "KubeCtlPass": {
                      "Type": "Pass",
                      "Next": "SNS Publish Fail",
                      "Parameters": {
                        "Cause.$": "States.Format('SSM command to install Kubectl failed. SSM commandId {}', $.Kubectl.CommandId)"
                      },
                      "ResultPath": "$.Error"
                    },
                    "KubeCtlWait": {
                      "Next": "KubectlStatus",
                      "Seconds": 5,
                      "Type": "Wait"
                    },
                    "KubectlInvocationStatus": {
                      "Next": "ConnectCalicocloud",
                      "Parameters": {
                        "CommandId.$": "$.Kubectl.CommandId"
                      },
                      "Resource": "arn:aws:states:::aws-sdk:ssm:listCommandInvocations",
                      "ResultPath": "$.Kubectl",
                      "ResultSelector": {
                        "CommandId.$": "$.CommandInvocations[0].CommandId",
                        "InstanceId.$": "$.CommandInvocations[0].InstanceId",
                        "Status.$": "$.CommandInvocations[0].Status"
                      },
                      "Type": "Task",
                      "Catch": [
                        {
                          "ErrorEquals": [
                            "States.TaskFailed"
                          ],
                          "Next": "SNS Publish Fail",
                          "ResultPath": "$.Error"
                        }
                      ]
                    },
                    "KubectlStatus": {
                      "Next": "KubeCtlChoice",
                      "Parameters": {
                        "CommandId.$": "$.Kubectl.CommandId"
                      },
                      "Resource": "arn:aws:states:::aws-sdk:ssm:listCommands",
                      "ResultPath": "$.Kubectl",
                      "ResultSelector": {
                        "CommandId.$": "$.Commands[0].CommandId",
                        "Status.$": "$.Commands[0].Status"
                      },
                      "Type": "Task",
                      "Catch": [
                        {
                          "ErrorEquals": [
                            "States.TaskFailed"
                          ],
                          "Next": "SNS Publish Fail",
                          "ResultPath": "$.Error"
                        }
                      ]
                    },
                    "NodeGroupChoice": {
                      "Choices": [
                        {
                          "Next": "NodeGroupWait",
                          "Or": [
                            {
                              "StringEquals": "CREATING",
                              "Variable": "$.DescribeNodeGroupOutput.Nodegroup.Status"
                            },
                            {
                              "StringEquals": "UPDATING",
                              "Variable": "$.DescribeNodeGroupOutput.Nodegroup.Status"
                            }
                          ]
                        },
                        {
                          "Next": "InstallKubectl",
                          "StringEquals": "ACTIVE",
                          "Variable": "$.DescribeNodeGroupOutput.Nodegroup.Status"
                        }
                      ],
                      "Default": "NodeGroupPass",
                      "Type": "Choice"
                    },
                    "NodeGroupPass": {
                      "Type": "Pass",
                      "Next": "SNS Publish Fail",
                      "Parameters": {
                        "Cause.$": "States.Format('{} nodegroup creation failed for EKS cluster {}', $.NodegroupName, $.ClusterName)"
                      },
                      "ResultPath": "$.Error"
                    },
                    "NodeGroupWait": {
                      "Next": "DescribeNodegroup",
                      "Seconds": 60,
                      "Type": "Wait"
                    },
                    "PutRoleAssumePolicy": {
                      "Next": "DescribeCluster",
                      "Parameters": {
                        "PolicyDocument": {
                          "Statement": [
                            {
                              "Action": "sts:AssumeRole",
                              "Effect": "Allow",
                              "Resource.$": "$.CalicocloudKubeAdminRoleArn",
                              "Sid": "AssumeKubeAdminRole"
                            }
                          ],
                          "Version": "2012-10-17"
                        },
                        "PolicyName": "AssumeKubeAdminRolePolicy",
                        "RoleName.$": "$.NodeGroupRoleName"
                      },
                      "Resource": "arn:aws:states:::aws-sdk:iam:putRolePolicy",
                      "Type": "Task",
                      "Catch": [
                        {
                          "ErrorEquals": [
                            "States.TaskFailed"
                          ],
                          "Next": "SNS Publish Fail",
                          "ResultPath": "$.Error"
                        }
                      ],
                      "ResultPath": null
                    },
                    "Success": {
                      "Type": "Succeed"
                    },
                    "ConnectCalicocloudChoice": {
                      "Choices": [
                        {
                          "Next": "ConnectCalicocloudWait",
                          "StringEquals": "Pending",
                          "Variable": "$.ConnectCalicocloud.Status"
                        },
                        {
                          "Next": "ConnectCalicocloudWait",
                          "StringEquals": "InProgress",
                          "Variable": "$.ConnectCalicocloud.Status"
                        },
                        {
                          "Next": "SNS Publish Success",
                          "StringEquals": "Success",
                          "Variable": "$.ConnectCalicocloud.Status"
                        }
                      ],
                      "Default": "ConnectCalicocloudPass",
                      "Type": "Choice"
                    },
                    "ConnectCalicocloudPass": {
                      "Type": "Pass",
                      "Next": "SNS Publish Fail",
                      "Parameters": {
                        "Cause.$": "States.Format('SSM command to connect eks cluster to Calico cloud failed. SSM commandId {}', $.ConnectCalicocloud.CommandId)"
                      },
                      "ResultPath": "$.Error"
                    },
                    "ConnectCalicocloudStatus": {
                      "Next": "ConnectCalicocloudChoice",
                      "Parameters": {
                        "CommandId.$": "$.ConnectCalicocloud.CommandId",
                        "InstanceId.$": "$.ConnectCalicocloud.InstanceId"
                      },
                      "Resource": "arn:aws:states:::aws-sdk:ssm:listCommandInvocations",
                      "ResultPath": "$.ConnectCalicocloud",
                      "ResultSelector": {
                        "CommandId.$": "$.CommandInvocations[0].CommandId",
                        "InstanceId.$": "$.CommandInvocations[0].InstanceId",
                        "Status.$": "$.CommandInvocations[0].Status"
                      },
                      "Type": "Task",
                      "Catch": [
                        {
                          "ErrorEquals": [
                            "States.TaskFailed"
                          ],
                          "Next": "SNS Publish Fail",
                          "ResultPath": "$.Error"
                        }
                      ]
                    },
                    "ConnectCalicocloudWait": {
                      "Next": "ConnectCalicocloudStatus",
                      "Seconds": 5,
                      "Type": "Wait"
                    },
                    "UpdatedClusterStatus": {
                      "Choices": [
                        {
                          "Next": "EKS CreateNodegroup",
                          "StringEquals": "ACTIVE",
                          "Variable": "$.ClusterDetails.Status"
                        },
                        {
                          "Next": "DescribeUpdatedCluster",
                          "StringEquals": "UPDATING",
                          "Variable": "$.ClusterDetails.Status"
                        }
                      ],
                      "Default": "EKSClusterPass",
                      "Type": "Choice"
                    },
                    "Wait5Min": {
                      "Next": "DescribeUpdatedCluster",
                      "Seconds": 300,
                      "Type": "Wait"
                    },
                    "SNS Publish Success": {
                      "Type": "Task",
                      "Resource": "arn:aws:states:::sns:publish",
                      "Parameters": {
                        "TopicArn.$": "$.NotificationTopicArn",
                        "Message": {
                          "ClusterName.$": "$.ClusterName",
                          "Status": "Succeeded",
                          "StatusMessage": "EKS cluster is successfully connected to Calico cloud"
                        }
                      },
                      "Next": "Success",
                      "ResultPath": null
                    },
                    "SNS Publish Fail": {
                      "Type": "Task",
                      "Resource": "arn:aws:states:::sns:publish",
                      "Parameters": {
                        "TopicArn.$": "$.NotificationTopicArn",
                        "Message": {
                          "ClusterName.$": "$.ClusterName",
                          "Status": "Failed",
                          "Cause.$": "$.Error.Cause",
                          "StatusMessage": "EKS cluster failed to connect to Calico cloud"
                        }
                      },
                      "Next": "Fail",
                      "ResultPath": null
                    }
                  }
                }
              LoggingConfiguration:
                Destinations:
                  - CloudWatchLogsLogGroup:
                      LogGroupArn: !GetAtt StateMachineLogGroup.Arn
                IncludeExecutionData: false
                Level: ERROR
              RoleArn: !GetAtt StateMachineRole.Arn
              StateMachineName: !Ref CalicocloudStateMachineName
              StateMachineType: STANDARD
              Tags:
                - Key: Name
                  Value: !Ref CalicocloudStateMachineName
          StateMachineLogGroup:
            Type: 'AWS::Logs::LogGroup'
            Properties:
              LogGroupName: !Sub '/aws/states/${CalicocloudStateMachineName}'
              RetentionInDays: !Ref StateMachineLogRetention
          StateMachineRole:
            Type: 'AWS::IAM::Role'
            Properties:
              AssumeRolePolicyDocument:
                Statement:
                  - Action: 'sts:AssumeRole'
                    Effect: Allow
                    Principal:
                      Service: states.amazonaws.com
                Version: 2012-10-17
              Policies:
                - PolicyName: !Sub '${CalicocloudStateMachineName}-policy'
                  PolicyDocument:
                    Version: 2012-10-17
                    Statement:
                      - Effect: Allow
                        Action:
                          - 'ssm:SendCommand'
                          - 'ssm:ListCommand*'
                          - 'eks:DescribeNodegroup'
                          - 'eks:DescribeCluster'
                          - 'eks:CreateNodegroup'
                          - 'ec2:DescribeSubnets'
                        Resource: '*'
                      - Sid: PublishToSNS
                        Effect: Allow
                        Action:
                          - 'sns:Publish'
                        Resource: !Ref CalicocloudConnectionSNS
                      - Sid: NodeGroupRolePass
                        Effect: Allow
                        Action: 'iam:PassRole'
                        Resource: !Sub 'arn:aws:iam::${AWS::AccountId}:role/${NodeGroupRolePrefix}*'
                        Condition:
                          StringEquals:
                            'iam:PassedToService': eks.amazonaws.com
                      - Sid: NodeGroupIamRole
                        Effect: Allow
                        Action:
                          - 'iam:CreateRole'
                          - 'iam:AttachRolePolicy'
                          - 'iam:PutRolePolicy'
                        Resource: !Sub 'arn:aws:iam::${AWS::AccountId}:role/${NodeGroupRolePrefix}*'
                      - Sid: IAMReadPermissions
                        Effect: Allow
                        Action:
                          - 'iam:GetRole'
                          - 'iam:ListAttachedRolePolicies'
                        Resource: !Sub 'arn:aws:iam::${AWS::AccountId}:role/*'
                      - Sid: AWSServiceRoleForAmazonEKSNodegroup
                        Effect: Allow
                        Action:
                          - 'iam:CreateServiceLinkedRole'
                        Resource: !Sub 'arn:aws:iam::${AWS::AccountId}:role/aws-service-role/eks-nodegroup.amazonaws.com/AWSServiceRoleForAmazonEKSNodegroup'
                      - Sid: CloudWatchLogging
                        Effect: Allow
                        Action:
                          - 'logs:CreateLogDelivery'
                          - 'logs:GetLogDelivery'
                          - 'logs:UpdateLogDelivery'
                          - 'logs:DeleteLogDelivery'
                          - 'logs:ListLogDeliveries'
                          - 'logs:PutResourcePolicy'
                          - 'logs:DescribeResourcePolicies'
                          - 'logs:DescribeLogGroups'
                        Resource:
                          - '*'
              Description: IAM role for Calicocloud connect state machine
              RoleName: !Sub '${CalicocloudStateMachineName}-stm-role'
              Tags:
                - Key: Name
                  Value: !Sub '${CalicocloudStateMachineName}-stm-role'
          CalicocloudKubeAdminRole:
            Type: 'AWS::IAM::Role'
            Properties:
              AssumeRolePolicyDocument:
                Statement:
                  - Action: 'sts:AssumeRole'
                    Effect: Allow
                    Principal:
                      AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
                Version: 2012-10-17
              Description: IAM role used as admin on Kubernetes cluster by Calicocloud connect solution
              RoleName: !Ref CalicocloudKubeAdminRoleName
              Tags:
                - Key: Name
                  Value: !Ref CalicocloudKubeAdminRoleName
          EKSClusterCreateEvent:
            Type: 'AWS::Events::Rule'
            Properties:
              Description: >-
                Event rule to trigger Calicocloud eks connection state machine on EKS cluster
                creation
              EventPattern: !Sub |
                {
                  "source": ["aws.eks"],
                  "detail-type": ["AWS API Call via CloudTrail"],
                  "detail": {
                    "eventSource": ["eks.amazonaws.com"],
                    "eventName": ["CreateCluster"],
                    "requestParameters": {
                      "tags": {
                        "${EventFilterTagKey}": ["${EventFilterTagValue}"]
                      }
                    }
                  }
                }
              Name: !Sub '${CalicocloudStateMachineName}-event'
              State: ENABLED
              Targets:
                - Arn: !GetAtt CalicocloudStateMachine.Arn
                  Id: StateMachineInvocation
                  RoleArn: !GetAtt EKSClusterEventRole.Arn
                  InputTransformer:
                    InputPathsMap:
                      AccountId: $.account
                      ClusterName: $.detail.requestParameters.name
                      NodeGroupSubnets: $.detail.requestParameters.resourcesVpcConfig.subnetIds
                      Region: $.region
                    InputTemplate: !Sub
                      - |
                        {
                          "ClusterName": <ClusterName>,
                          "NodeGroupSubnets" : <NodeGroupSubnets>,
                          "AccountId": <AccountId>,
                          "Region" : <Region>,
                          "NodeGroupRoleName": "${NodeGroupRolePrefix}-<ClusterName>-role",
                          "NodegroupName": "calicocloud-workloads",
                          "NodeGroupInstanceTypes": ["${NodeGroupInstanceType}"],
                          "NodeGroupSize": ${NodeGroupSize},
                          "CalicocloudKubeAdminRoleArn":"${CalicocloudKubeAdminRoleArn}",
                          "CalicocloudScriptUrl": "${CalicocloudScriptUrl}",
                          "NotificationTopicArn": "${CalicocloudConnectionSNS}"
                        }
                      - CalicocloudKubeAdminRoleArn: !GetAtt CalicocloudKubeAdminRole.Arn
          CalicocloudConnectionSNS:
            Type: 'AWS::SNS::Topic'
            Properties:
              DisplayName: CalicocloudConnectionNotification
              TopicName: CalicocloudConnectionNotification
          CalicocloudConnectionSNSPolicy:
            Type: 'AWS::SNS::TopicPolicy'
            Properties:
              PolicyDocument:
                Version: 2012-10-17
                Statement:
                  - Sid: TrustCalicoStateMachineToPublish
                    Effect: Allow
                    Principal:
                      AWS: !GetAtt StateMachineRole.Arn
                    Action:
                      - 'sns:Publish'
                    Resource: !Ref CalicocloudConnectionSNS
              Topics:
                - !Ref CalicocloudConnectionSNS
          CalicocloudConnectionSNSSubscription:
            Condition: CreateSNSSubscription
            Type: AWS::SNS::Subscription
            Properties:
              Endpoint: !Ref NotificationEmailAddress
              Protocol: email
              TopicArn: !Ref CalicocloudConnectionSNS
        Outputs:
          CalicocloudKubeAdminRoleArn:
            Description: Kube admin role arn for calicocloud
            Value: !GetAtt CalicocloudKubeAdminRole.Arn
      Parameters:
        - ParameterKey: CalicocloudKubeAdminRoleName
          ParameterValue: !Ref CalicocloudKubeAdminRoleName
        - ParameterKey: CalicocloudStateMachineName
          ParameterValue: !Ref CalicocloudStateMachineName
        - ParameterKey: StateMachineLogRetention
          ParameterValue: !Ref StateMachineLogRetention
        - ParameterKey: NodeGroupRolePrefix
          ParameterValue: !Ref NodeGroupRolePrefix
        - ParameterKey: NodeGroupInstanceType
          ParameterValue: !Ref NodeGroupInstanceType
        - ParameterKey: NodeGroupSize
          ParameterValue: !Ref NodeGroupSize
        - ParameterKey: CalicocloudScriptUrl
          ParameterValue: !Ref CalicocloudScriptUrl
        - ParameterKey: EventFilterTagKey
          ParameterValue: !Ref EventFilterTagKey
        - ParameterKey: EventFilterTagValue
          ParameterValue: !Ref EventFilterTagValue
        - ParameterKey: NotificationEmailAddress
          ParameterValue: !Ref NotificationEmailAddress
